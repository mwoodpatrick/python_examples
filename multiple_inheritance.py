#!/usr/bin/env python3
"""
Multiple Inheritance Example: Vehicle System
Generated by Claude

This program demonstrates multiple inheritance by creating a vehicle system
where different types of vehicles inherit from multiple base classes.

This Python program demonstrates multiple inheritance through a comprehensive vehicle system. Here are the key concepts illustrated:

**Base Classes:**
- `Engine`: Provides engine functionality (start/stop, fuel type, horsepower)
- `Flyable`: Provides flying capabilities (take off, land, climb)
- `Sailable`: Provides sailing functionality (deploy/furl sails)
- `Drivable`: Provides ground driving capabilities (accelerate, brake)

**Multiple Inheritance Examples:**
- `Car`: Inherits from `Engine` and `Drivable`
- `Airplane`: Inherits from `Engine` and `Flyable`
- `Sailboat`: Inherits from `Sailable` and `Drivable`
- `Seaplane`: Inherits from all three (`Engine`, `Flyable`, `Sailable`)

**Key Features Demonstrated:**
1. **Method Resolution Order (MRO)**: Shows how Python determines which method to call
2. **Diamond Problem**: Demonstrates how Python's `super()` resolves multiple inheritance conflicts
3. **Constructor Chaining**: Proper initialization of multiple parent classes
4. **Shared Functionality**: How methods from different parents can work together

The program includes practical examples of each vehicle type performing operations specific to their inherited capabilities, making it easy to understand how multiple inheritance works in real-world scenarios.
"""

# Base classes representing different capabilities
class Engine:
    """Base class for engine-powered vehicles"""
    def __init__(self, fuel_type="gasoline", horsepower=100):
        self.fuel_type = fuel_type
        self.horsepower = horsepower
        self.engine_running = False
    
    def start_engine(self):
        if not self.engine_running:
            self.engine_running = True
            print(f"Engine started! Running on {self.fuel_type} with {self.horsepower} HP")
        else:
            print("Engine is already running")
    
    def stop_engine(self):
        if self.engine_running:
            self.engine_running = False
            print("Engine stopped")
        else:
            print("Engine is already off")

class Flyable:
    """Base class for flying capabilities"""
    def __init__(self, max_altitude=10000):
        self.max_altitude = max_altitude
        self.current_altitude = 0
        self.flying = False
    
    def take_off(self):
        if not self.flying:
            self.flying = True
            self.current_altitude = 100
            print(f"Taking off! Current altitude: {self.current_altitude} feet")
        else:
            print("Already flying!")
    
    def land(self):
        if self.flying:
            self.flying = False
            self.current_altitude = 0
            print("Landing complete. Back on the ground.")
        else:
            print("Already on the ground")
    
    def climb(self, feet):
        if self.flying:
            new_altitude = min(self.current_altitude + feet, self.max_altitude)
            print(f"Climbing from {self.current_altitude} to {new_altitude} feet")
            self.current_altitude = new_altitude
        else:
            print("Cannot climb while on the ground. Take off first!")

class Sailable:
    """Base class for sailing capabilities"""
    def __init__(self, sail_area=50):
        self.sail_area = sail_area
        self.sails_deployed = False
    
    def deploy_sails(self):
        if not self.sails_deployed:
            self.sails_deployed = True
            print(f"Sails deployed! Sail area: {self.sail_area} sq ft")
        else:
            print("Sails are already deployed")
    
    def furl_sails(self):
        if self.sails_deployed:
            self.sails_deployed = False
            print("Sails furled")
        else:
            print("Sails are already furled")

class Drivable:
    """Base class for ground driving capabilities"""
    def __init__(self, max_speed=60):
        self.max_speed = max_speed
        self.current_speed = 0
        self.driving = False
    
    def accelerate(self, speed_increase):
        if hasattr(self, 'engine_running') and not self.engine_running:
            print("Cannot accelerate - engine is not running!")
            return
        
        new_speed = min(self.current_speed + speed_increase, self.max_speed)
        print(f"Accelerating from {self.current_speed} to {new_speed} mph")
        self.current_speed = new_speed
        self.driving = self.current_speed > 0
    
    def brake(self, speed_decrease):
        new_speed = max(self.current_speed - speed_decrease, 0)
        print(f"Braking from {self.current_speed} to {new_speed} mph")
        self.current_speed = new_speed
        self.driving = self.current_speed > 0

# Multiple inheritance classes
class Car(Engine, Drivable):
    """A car inherits from Engine and Drivable"""
    def __init__(self, make, model):
        # Call parent constructors
        Engine.__init__(self, fuel_type="gasoline", horsepower=200)
        Drivable.__init__(self, max_speed=120)
        self.make = make
        self.model = model
        print(f"Created {make} {model}")
    
    def __str__(self):
        return f"{self.make} {self.model} (Car)"

class Airplane(Engine, Flyable):
    """An airplane inherits from Engine and Flyable"""
    def __init__(self, model, passenger_capacity):
        Engine.__init__(self, fuel_type="jet fuel", horsepower=2000)
        Flyable.__init__(self, max_altitude=35000)
        self.model = model
        self.passenger_capacity = passenger_capacity
        print(f"Created {model} airplane with capacity for {passenger_capacity} passengers")
    
    def __str__(self):
        return f"{self.model} (Airplane)"

class Sailboat(Sailable, Drivable):
    """A sailboat inherits from Sailable and Drivable (for motor backup)"""
    def __init__(self, name, length):
        Sailable.__init__(self, sail_area=200)
        Drivable.__init__(self, max_speed=25)
        self.name = name
        self.length = length
        print(f"Created sailboat '{name}' ({length} feet)")
    
    def __str__(self):
        return f"{self.name} (Sailboat)"

class Seaplane(Engine, Flyable, Sailable):
    """A seaplane inherits from all three base classes"""
    def __init__(self, model):
        Engine.__init__(self, fuel_type="aviation gas", horsepower=300)
        Flyable.__init__(self, max_altitude=15000)
        Sailable.__init__(self, sail_area=0)  # Uses engine for water movement
        self.model = model
        print(f"Created {model} seaplane")
    
    def water_taxi(self):
        """Special method for moving on water using engine power"""
        if self.engine_running and not self.flying:
            print("Taxiing on water using engine power")
        else:
            print("Need engine running and to be on water to taxi")
    
    def __str__(self):
        return f"{self.model} (Seaplane)"

# Demonstration function
def demonstrate_multiple_inheritance():
    """Demonstrate multiple inheritance with various vehicle types"""
    print("=== Multiple Inheritance Vehicle System Demo ===\n")
    
    # Create different vehicles
    car = Car("Toyota", "Camry")
    plane = Airplane("Boeing 737", 180)
    boat = Sailboat("Sea Breeze", 35)
    seaplane = Seaplane("Cessna 172 Skyhawk")
    
    vehicles = [car, plane, boat, seaplane]
    
    print(f"\n=== Created {len(vehicles)} vehicles ===")
    for vehicle in vehicles:
        print(f"- {vehicle}")
    
    print("\n=== Car Operations ===")
    car.start_engine()
    car.accelerate(30)
    car.accelerate(20)
    car.brake(15)
    car.stop_engine()
    
    print("\n=== Airplane Operations ===")
    plane.start_engine()
    plane.take_off()
    plane.climb(5000)
    plane.climb(30000)  # Will hit max altitude
    plane.land()
    plane.stop_engine()
    
    print("\n=== Sailboat Operations ===")
    boat.deploy_sails()
    boat.accelerate(10)  # Using motor as backup
    boat.brake(5)
    boat.furl_sails()
    
    print("\n=== Seaplane Operations (Multiple Inheritance) ===")
    seaplane.start_engine()
    seaplane.water_taxi()
    seaplane.take_off()
    seaplane.climb(2000)
    seaplane.land()
    seaplane.water_taxi()
    seaplane.stop_engine()
    
    print("\n=== Method Resolution Order (MRO) Example ===")
    print(f"Seaplane MRO: {[cls.__name__ for cls in Seaplane.__mro__]}")
    print("This shows the order Python searches for methods in multiple inheritance")

# Additional example showing diamond problem resolution
class Vehicle:
    """Base vehicle class"""
    def __init__(self):
        print("Vehicle.__init__ called")
        self.vehicle_id = "VEH001"

class LandVehicle(Vehicle):
    """Land vehicle class"""
    def __init__(self):
        super().__init__()
        print("LandVehicle.__init__ called")
        self.wheels = 4

class WaterVehicle(Vehicle):
    """Water vehicle class"""
    def __init__(self):
        super().__init__()
        print("WaterVehicle.__init__ called")
        self.hull_type = "displacement"

class AmphibiousVehicle(LandVehicle, WaterVehicle):
    """Amphibious vehicle demonstrating diamond inheritance"""
    def __init__(self):
        super().__init__()
        print("AmphibiousVehicle.__init__ called")
        self.amphibious = True

def demonstrate_diamond_problem():
    """Demonstrate how Python resolves the diamond inheritance problem"""
    print("\n=== Diamond Inheritance Pattern ===")
    print("Creating amphibious vehicle...")
    amphibious = AmphibiousVehicle()
    print(f"MRO: {[cls.__name__ for cls in AmphibiousVehicle.__mro__]}")
    print("Notice how Vehicle.__init__ is called only once, avoiding the diamond problem")

if __name__ == "__main__":
    demonstrate_multiple_inheritance()
    demonstrate_diamond_problem()
