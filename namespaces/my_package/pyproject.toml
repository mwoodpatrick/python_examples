# The `pyproject.toml` file is a standard configuration file used in modern Python packaging. It was introduced by **PEP 518** and serves as a central place to store build system requirements and other project metadata and tool configurations.
# 
# Before `pyproject.toml`, project metadata and build configurations were often scattered across files like `setup.py`, `setup.cfg`, `requirements.txt`, and various tool-specific configuration files (like those for linters, formatters, test runners, etc.).
# 
# The `pyproject.toml` file aims to consolidate much of this configuration into a single, standardized file using the TOML format.
# 
# Here are the key purposes and sections commonly found in a `pyproject.toml` file:
# 
# 1.  **Specifying Build System Requirements (`[build-system]`)**:
# 
#       * This is the original purpose of `pyproject.toml`. It tells tools (like `pip` or build tools) what build backend is needed to build your project.
#       * It lists the packages required to build the project (e.g., `hatchling`, `setuptools`, `poetry-core`) and specifies the build backend module to use.
# 
#     <!-- end list -->
# 
#     ```toml
#     [build-system]
#     requires = ["hatchling"] # Or setuptools, poetry-core, etc.
#     build-backend = "hatchling.build" # Or setuptools.build_meta, poetry.core.masonry.api, etc.
#     ```
# 
# 2.  **Project Metadata (`[project]`)**:
# 
#       * Introduced by **PEP 621**, this section provides standard metadata about your project. This information was traditionally in `setup.py` or `setup.cfg`.
#       * It includes things like:
#           * `name`: The name of your package.
#           * `version`: The version of your package.
#           * `description`: A short description.
#           * `readme`: Specifies the README file.
#           * `requires-python`: The Python versions your package is compatible with.
#           * `dependencies`: The runtime dependencies of your package.
#           * `authors`: Information about the package authors.
#           * `license`: Licensing information.
#           * `keywords`: Keywords to help discover the package.
#           * `classifiers`: PyPI classifiers.
#           * `urls`: Links related to the project (homepage, repository, etc.).
#           * `scripts`: Entry points for command-line scripts.
#           * `optional-dependencies`: Groups of optional dependencies (often called "extras").
# 
#     <!-- end list -->
# 
#     ```toml
#     [project]
#     name = "my-awesome-package"
#     version = "1.0.0"
#     description = "A sample Python package"
#     readme = "README.md"
#     requires-python = ">=3.8"
#     dependencies = [
#         "requests>=2.28.1",
#         "numpy",
#     ]
#     authors = [
#       { name="Your Name", email="your.email@example.com" },
#     ]
#     license = { file="LICENSE" }
#     keywords = ["packaging", "example"]
#     classifiers = [
#         "Programming Language :: Python :: 3",
#         "License :: OSI Approved :: MIT License",
#         "Operating System :: OS Independent",
#     ]
# 
#     [project.urls]
#     "Homepage" = "https://github.com/yourusername/my-awesome-package"
#     "Bug Tracker" = "https://github.com/yourusername/my-awesome-package/issues"
# 
#     [project.scripts]
#     my-awesome-cli = "my_awesome_package.cli:main"
# 
#     [project.optional-dependencies]
#     dev = ["pytest", "flake8"]
#     docs = ["sphinx", "myst-parser"]
#     ```
# 
# 3.  **Tool-Specific Configuration (`[tool.<tool-name>]`)**:
# 
#       * Many Python tools have adopted `pyproject.toml` as a place for their configuration.
#       * This section allows different tools to store their settings without conflicting with each other.
#       * Examples include configurations for:
#           * `[tool.hatch]`: Hatch project manager settings.
#           * `[tool.poetry]`: Poetry project manager settings.
#           * `[tool.black]`: Black formatter settings.
#           * `[tool.isort]`: isort import sorter settings.
#           * `[tool.mypy]`: Mypy type checker settings.
#           * `[tool.pytest]`: pytest test framework settings.
#           * `[tool.ruff]`: Ruff linter and formatter settings.
# 
#     <!-- end list -->
# 
#     ```toml
#     [tool.black]
#     line-length = 88
#     target-version = ['py38']
# 
#     [tool.isort]
#     profile = "black"
# 
#     [tool.mypy]
#     strict = true
#     ```
# 
# In summary, `pyproject.toml` is the modern, standardized file for configuring Python projects, encompassing build system requirements, project metadata, and the settings for various development tools. It promotes consistency and simplifies project setup and management.


[project]
name = "my_package"
version = "0.1.0"
description = "Example Package"
readme = "README.md"
requires-python = ">=3.10"

# Minimum support version for packages - ubuntu 22.04
# https://launchpad.net/ubuntu/jammy/+package/python3-<package-name>
dependencies = [
    "requests>=2.25",
    "rich>=13.9.4", 
    "toml>=0.10.2",
    "click>=8.0.3",
]

license = {text = "MIT"}

classifiers = [
    "Private :: Do not Upload"
]

[project.scripts]
example-cli = "example:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "hatch>=1.13.0",
    "mypy>=1.13.0",
    "pytest>=8.3.3",
    "ruff>=0.8.0",
    "types-requests>=2.32.0.20241016",
    "types-toml>=0.10.8.20240310",
]
